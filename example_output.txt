// Code generated by mockery v2.32.3. DO NOT EDIT.

package main

import (
	blob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/blob"
	blockblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/blockblob"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockBlockBlobClient is an autogenerated mock type for the blockBlobClient type
type mockBlockBlobClient struct {
	mock.Mock
}

type mockBlockBlobClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBlockBlobClient) EXPECT() *mockBlockBlobClient_Expecter {
	return &mockBlockBlobClient_Expecter{mock: &_m.Mock}
}

// CommitBlockList provides a mock function with given fields: ctx, base64BlockIDs, options
func (_m *mockBlockBlobClient) CommitBlockList(ctx context.Context, base64BlockIDs []string, options *blockblob.CommitBlockListOptions) (blockblob.CommitBlockListResponse, error) {
	ret := _m.Called(ctx, base64BlockIDs, options)

	var r0 blockblob.CommitBlockListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, *blockblob.CommitBlockListOptions) (blockblob.CommitBlockListResponse, error)); ok {
		return rf(ctx, base64BlockIDs, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, *blockblob.CommitBlockListOptions) blockblob.CommitBlockListResponse); ok {
		r0 = rf(ctx, base64BlockIDs, options)
	} else {
		r0 = ret.Get(0).(blockblob.CommitBlockListResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, *blockblob.CommitBlockListOptions) error); ok {
		r1 = rf(ctx, base64BlockIDs, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBlockBlobClient_CommitBlockList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitBlockList'
type mockBlockBlobClient_CommitBlockList_Call struct {
	*mock.Call
}

// CommitBlockList is a helper method to define mock.On call
//   - ctx context.Context
//   - base64BlockIDs []string
//   - options *blockblob.CommitBlockListOptions
func (_e *mockBlockBlobClient_Expecter) CommitBlockList(ctx interface{}, base64BlockIDs interface{}, options interface{}) *mockBlockBlobClient_CommitBlockList_Call {
	return &mockBlockBlobClient_CommitBlockList_Call{Call: _e.mock.On("CommitBlockList", ctx, base64BlockIDs, options)}
}

func (_c *mockBlockBlobClient_CommitBlockList_Call) Run(run func(ctx context.Context, base64BlockIDs []string, options *blockblob.CommitBlockListOptions)) *mockBlockBlobClient_CommitBlockList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(*blockblob.CommitBlockListOptions))
	})
	return _c
}

func (_c *mockBlockBlobClient_CommitBlockList_Call) Return(_a0 blockblob.CommitBlockListResponse, _a1 error) *mockBlockBlobClient_CommitBlockList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBlockBlobClient_CommitBlockList_Call) RunAndReturn(run func(context.Context, []string, *blockblob.CommitBlockListOptions) (blockblob.CommitBlockListResponse, error)) *mockBlockBlobClient_CommitBlockList_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, o
func (_m *mockBlockBlobClient) Delete(ctx context.Context, o *blob.DeleteOptions) (blockblob.DeleteResponse, error) {
	ret := _m.Called(ctx, o)

	var r0 blockblob.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *blob.DeleteOptions) (blockblob.DeleteResponse, error)); ok {
		return rf(ctx, o)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *blob.DeleteOptions) blockblob.DeleteResponse); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Get(0).(blockblob.DeleteResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *blob.DeleteOptions) error); ok {
		r1 = rf(ctx, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBlockBlobClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockBlockBlobClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - o *blob.DeleteOptions
func (_e *mockBlockBlobClient_Expecter) Delete(ctx interface{}, o interface{}) *mockBlockBlobClient_Delete_Call {
	return &mockBlockBlobClient_Delete_Call{Call: _e.mock.On("Delete", ctx, o)}
}

func (_c *mockBlockBlobClient_Delete_Call) Run(run func(ctx context.Context, o *blob.DeleteOptions)) *mockBlockBlobClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*blob.DeleteOptions))
	})
	return _c
}

func (_c *mockBlockBlobClient_Delete_Call) Return(_a0 blockblob.DeleteResponse, _a1 error) *mockBlockBlobClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBlockBlobClient_Delete_Call) RunAndReturn(run func(context.Context, *blob.DeleteOptions) (blockblob.DeleteResponse, error)) *mockBlockBlobClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockList provides a mock function with given fields: ctx, listType, options
func (_m *mockBlockBlobClient) GetBlockList(ctx context.Context, listType blockblob.BlockListType, options *blockblob.GetBlockListOptions) (blockblob.GetBlockListResponse, error) {
	ret := _m.Called(ctx, listType, options)

	var r0 blockblob.GetBlockListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, blockblob.BlockListType, *blockblob.GetBlockListOptions) (blockblob.GetBlockListResponse, error)); ok {
		return rf(ctx, listType, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, blockblob.BlockListType, *blockblob.GetBlockListOptions) blockblob.GetBlockListResponse); ok {
		r0 = rf(ctx, listType, options)
	} else {
		r0 = ret.Get(0).(blockblob.GetBlockListResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, blockblob.BlockListType, *blockblob.GetBlockListOptions) error); ok {
		r1 = rf(ctx, listType, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBlockBlobClient_GetBlockList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockList'
type mockBlockBlobClient_GetBlockList_Call struct {
	*mock.Call
}

// GetBlockList is a helper method to define mock.On call
//   - ctx context.Context
//   - listType blockblob.BlockListType
//   - options *blockblob.GetBlockListOptions
func (_e *mockBlockBlobClient_Expecter) GetBlockList(ctx interface{}, listType interface{}, options interface{}) *mockBlockBlobClient_GetBlockList_Call {
	return &mockBlockBlobClient_GetBlockList_Call{Call: _e.mock.On("GetBlockList", ctx, listType, options)}
}

func (_c *mockBlockBlobClient_GetBlockList_Call) Run(run func(ctx context.Context, listType blockblob.BlockListType, options *blockblob.GetBlockListOptions)) *mockBlockBlobClient_GetBlockList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(blockblob.BlockListType), args[2].(*blockblob.GetBlockListOptions))
	})
	return _c
}

func (_c *mockBlockBlobClient_GetBlockList_Call) Return(_a0 blockblob.GetBlockListResponse, _a1 error) *mockBlockBlobClient_GetBlockList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBlockBlobClient_GetBlockList_Call) RunAndReturn(run func(context.Context, blockblob.BlockListType, *blockblob.GetBlockListOptions) (blockblob.GetBlockListResponse, error)) *mockBlockBlobClient_GetBlockList_Call {
	_c.Call.Return(run)
	return _c
}

// StageBlockFromURL provides a mock function with given fields: ctx, base64BlockID, sourceURL, options
func (_m *mockBlockBlobClient) StageBlockFromURL(ctx context.Context, base64BlockID string, sourceURL string, options *blockblob.StageBlockFromURLOptions) (blockblob.StageBlockFromURLResponse, error) {
	ret := _m.Called(ctx, base64BlockID, sourceURL, options)

	var r0 blockblob.StageBlockFromURLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *blockblob.StageBlockFromURLOptions) (blockblob.StageBlockFromURLResponse, error)); ok {
		return rf(ctx, base64BlockID, sourceURL, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *blockblob.StageBlockFromURLOptions) blockblob.StageBlockFromURLResponse); ok {
		r0 = rf(ctx, base64BlockID, sourceURL, options)
	} else {
		r0 = ret.Get(0).(blockblob.StageBlockFromURLResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *blockblob.StageBlockFromURLOptions) error); ok {
		r1 = rf(ctx, base64BlockID, sourceURL, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBlockBlobClient_StageBlockFromURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StageBlockFromURL'
type mockBlockBlobClient_StageBlockFromURL_Call struct {
	*mock.Call
}

// StageBlockFromURL is a helper method to define mock.On call
//   - ctx context.Context
//   - base64BlockID string
//   - sourceURL string
//   - options *blockblob.StageBlockFromURLOptions
func (_e *mockBlockBlobClient_Expecter) StageBlockFromURL(ctx interface{}, base64BlockID interface{}, sourceURL interface{}, options interface{}) *mockBlockBlobClient_StageBlockFromURL_Call {
	return &mockBlockBlobClient_StageBlockFromURL_Call{Call: _e.mock.On("StageBlockFromURL", ctx, base64BlockID, sourceURL, options)}
}

func (_c *mockBlockBlobClient_StageBlockFromURL_Call) Run(run func(ctx context.Context, base64BlockID string, sourceURL string, options *blockblob.StageBlockFromURLOptions)) *mockBlockBlobClient_StageBlockFromURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*blockblob.StageBlockFromURLOptions))
	})
	return _c
}

func (_c *mockBlockBlobClient_StageBlockFromURL_Call) Return(_a0 blockblob.StageBlockFromURLResponse, _a1 error) *mockBlockBlobClient_StageBlockFromURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBlockBlobClient_StageBlockFromURL_Call) RunAndReturn(run func(context.Context, string, string, *blockblob.StageBlockFromURLOptions) (blockblob.StageBlockFromURLResponse, error)) *mockBlockBlobClient_StageBlockFromURL_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBlobFromURL provides a mock function with given fields: ctx, copySource, options
func (_m *mockBlockBlobClient) UploadBlobFromURL(ctx context.Context, copySource string, options *blockblob.UploadBlobFromURLOptions) (blockblob.UploadBlobFromURLResponse, error) {
	ret := _m.Called(ctx, copySource, options)

	var r0 blockblob.UploadBlobFromURLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *blockblob.UploadBlobFromURLOptions) (blockblob.UploadBlobFromURLResponse, error)); ok {
		return rf(ctx, copySource, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *blockblob.UploadBlobFromURLOptions) blockblob.UploadBlobFromURLResponse); ok {
		r0 = rf(ctx, copySource, options)
	} else {
		r0 = ret.Get(0).(blockblob.UploadBlobFromURLResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *blockblob.UploadBlobFromURLOptions) error); ok {
		r1 = rf(ctx, copySource, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBlockBlobClient_UploadBlobFromURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBlobFromURL'
type mockBlockBlobClient_UploadBlobFromURL_Call struct {
	*mock.Call
}

// UploadBlobFromURL is a helper method to define mock.On call
//   - ctx context.Context
//   - copySource string
//   - options *blockblob.UploadBlobFromURLOptions
func (_e *mockBlockBlobClient_Expecter) UploadBlobFromURL(ctx interface{}, copySource interface{}, options interface{}) *mockBlockBlobClient_UploadBlobFromURL_Call {
	return &mockBlockBlobClient_UploadBlobFromURL_Call{Call: _e.mock.On("UploadBlobFromURL", ctx, copySource, options)}
}

func (_c *mockBlockBlobClient_UploadBlobFromURL_Call) Run(run func(ctx context.Context, copySource string, options *blockblob.UploadBlobFromURLOptions)) *mockBlockBlobClient_UploadBlobFromURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*blockblob.UploadBlobFromURLOptions))
	})
	return _c
}

func (_c *mockBlockBlobClient_UploadBlobFromURL_Call) Return(_a0 blockblob.UploadBlobFromURLResponse, _a1 error) *mockBlockBlobClient_UploadBlobFromURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBlockBlobClient_UploadBlobFromURL_Call) RunAndReturn(run func(context.Context, string, *blockblob.UploadBlobFromURLOptions) (blockblob.UploadBlobFromURLResponse, error)) *mockBlockBlobClient_UploadBlobFromURL_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBlockBlobClient creates a new instance of mockBlockBlobClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBlockBlobClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBlockBlobClient {
	mock := &mockBlockBlobClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
